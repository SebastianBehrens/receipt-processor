"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from urllib.parse import urlparse

# Load environment variables from .env file
load_dotenv(Path(__file__).parent / '.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(os.getenv('BASE_DIR', Path(__file__).resolve().parent.parent))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is required")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Security settings for SSL-only deployment
if not DEBUG:
    # HTTPS/SSL Security
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Cookie Security
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Additional security headers
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'

# Extract domain from SERVER_ROOT_URL and set ALLOWED_HOSTS
SERVER_ROOT_URL = os.getenv('SERVER_ROOT_URL')
if not SERVER_ROOT_URL:
    raise ValueError("SERVER_ROOT_URL environment variable is required")

# Extract domain from URL (e.g., 'https://receipt-processor.epsian.ch' -> 'receipt-processor.epsian.ch')
parsed_url = urlparse(SERVER_ROOT_URL)
domain = parsed_url.netloc
ALLOWED_HOSTS = [domain, 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "core.auth_middleware.AutheliaRemoteUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'core.auth_backends.AutheliaRemoteUserBackend',
    'django.contrib.auth.backends.ModelBackend',  # Keep for Django admin fallback
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# Disabled - using Authelia for authentication

AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Media files (user uploads)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "data"

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging configuration

# Ensure logs directory exists
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

# Authentication settings
LOGIN_REDIRECT_URL = '/app/'  # Redirect to protected area after login
LOGOUT_REDIRECT_URL = '/accounts/login/'
LOGIN_URL = '/accounts/login/'

# Authelia header-based authentication settings
# Base URL for Authelia (used for logout)
AUTHELIA_BASE_URL = os.getenv('AUTHELIA_BASE_URL', 'https://auth.epsian.ch')

# Logout from Authelia after logout on the Django application
AUTHELIA_LOGOUT_URL = os.getenv('AUTHELIA_LOGOUT_URL', f'{AUTHELIA_BASE_URL}/logout')

# URL to access the protected application area through Authelia
# This should point to the protected route (e.g., /app/) which will trigger Authelia auth
AUTHELIA_APP_URL = os.getenv('AUTHELIA_APP_URL', f'{SERVER_ROOT_URL}/app/')

# Optional: Groups to exclude when synchronizing user groups from Authelia
# AUTHELIA_EXCLUDED_GROUPS = ['system', 'internal']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s [%(levelname)8s]: %(message)s',
        },
        'simple': {
            'format': '%(asctime)s [%(levelname)8s]: %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'INFO',  # Only show INFO and above in console
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'django.log',
            'formatter': 'verbose',
            'level': 'DEBUG',  # Capture everything in file
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'core': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',  # Allow all levels from our app
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],  # Only console for Django to avoid noise
            'level': 'INFO',
            'propagate': False,
        },
    },
}
